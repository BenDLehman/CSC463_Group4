//Aaron Gerber & Ben Lehman        Group 4         
#define TIME 1.0
#define RIGHTFRONT digital(9)
#define RIGHTBACK digital(10)
#define LEFTFRONT digital(11)
#define LEFTBACK digital(12)
#define PRESSED 1
#define BOOLEAN int
#define TRUE 1
#define FALSE 0
#define R_VALUE 0.25
#define MAX_R 1.0
#define MIN_R -1.0
#define FRONT 0
#define LEFT 1
#define RIGHT 2
#define BACK 3

float rewardsArray[4] = {0.0,0.0,0.0,0.0};
int main()
{
    int previousDir = 0;
    float direction = 0.0;
    int reset = 0;
    int index = 0;
    while(1)
      {
        printf("F: %f| L: %f| R: %f| B: %f\n",rewardsArray[FRONT], rewardsArray[LEFT], rewardsArray[RIGHT], rewardsArray[BACK]);
                //Reset the values of the array if it has gone in the same direction 5 times in a row.
        if(reset == 5)
              {
                reset=0;
                rewardsArray[FRONT]=0.0;
                rewardsArray[LEFT]=0.0;
                rewardsArray[RIGHT]=0.0;
                rewardsArray[BACK]=0.0;
        }
        index = findIndex();
        switch(index)
          {
            case FRONT:
              //check if it has gone this direction last time.
              if(previousDir==FRONT)
              reset++;
            //if not reset the count
            else
              reset=0;
              goForward(TIME);
            getPenalty(FRONT);
            previousDir=FRONT;
            break;
            case LEFT:
              //Check if it has gone this direction before
              if(previousDir==LEFT)
              reset++;
            //If not reset the count
            else
              reset=0;
            previousDir=LEFT;
              goBackward(TIME);
              turnLeft(TIME);
            getPenalty(LEFT);
            //If the direction was previously going to the right,reset the direction
            if(direction>0.0)
              direction=0.0;
            //Otherwise, mark that we are moving to the left
            else
              direction-=TIME;
            //If we have been moving to the left for too long, penalize it
            if(direction<-2.0)
              {
                penalty(LEFT);
                penalty(LEFT);
            }
            break;
            case RIGHT:
              //Check if it has gone this direction before
              if(previousDir==RIGHT)
              reset++;
            //if not reset the count
            else
              reset=0;
            previousDir=RIGHT;
              goBackward(TIME);
              turnRight(TIME);
            getPenalty(RIGHT);
            //if we have been moving left previously reset the direction we are going
            if(direction<0.0)
              direction=0.0;
            //otherwise, mark that we are going to the right.
            else
              direction+=TIME;
            //if we have been moving to the right for too long, penalize it
            if(direction>2.0){
                penalty(RIGHT);
                penalty(RIGHT);
            }
            break;
            case BACK:
              //check if we have moved this direction previously
              if(previousDir==BACK)
              reset++;
            //otherwise, reset the count
            else
              reset=0;
            previousDir=BACK;
              goBackward(TIME);
            getPenalty(BACK);
            break;
            default:
              goForward(TIME);
            break;
        }
        
    }
    
}

//Determine the new reward table based on the results of the previous round.
void getPenalty(int direction)
{
    switch(direction)
      {
        case FRONT:
          if(RIGHTFRONT==PRESSED||RIGHTBACK==PRESSED||
           LEFTFRONT==PRESSED||LEFTBACK==PRESSED)
          {
            penalty(FRONT);
  
        }            
          else
          reward(FRONT);
        break;
        case LEFT:
          if(LEFTBACK==PRESSED||RIGHTFRONT==PRESSED||
           LEFTFRONT==PRESSED||RIGHTBACK==PRESSED)
          {
            penalty(LEFT);
        }
        else
          reward(LEFT);
        break;
        case RIGHT:
          if(LEFTBACK==PRESSED||RIGHTFRONT==PRESSED||
           LEFTFRONT==PRESSED||RIGHTBACK==PRESSED)
          {
            penalty(RIGHT);
        }
        else
          reward(RIGHT);
        break;
        case BACK:
          if(LEFTBACK==PRESSED||RIGHTFRONT==PRESSED||
           LEFTFRONT==PRESSED||RIGHTBACK==PRESSED)
          {
            penalty(BACK);
        }
        else
          reward(BACK);
        break;
        default:
          break;
    }
}

//Retrieve the highest index value and send it back, or if they are equal return a random direction
int findIndex()
{
    int index = 0;
    int i;
    for(i = 0; i<4; i++)
      {
        if(rewardsArray[i]>rewardsArray[index])
          index = i;
        else if(rewardsArray[i]==rewardsArray[index])
          {
            int a = random(2);
            if(a==0)
              index=i;
        }
    }
    return index;
}

//Penalizes the index given, provided it doesn't go beyond the min reward value.
BOOLEAN penalty(int index)
{
    if(rewardsArray[index]>0.0)
      rewardsArray[index] = -R_VALUE;
    else
      {
        rewardsArray[index] -= R_VALUE;
        if(rewardsArray[index]<MIN_R)
          {
            rewardsArray[index] = MIN_R;
            return TRUE;
        }
    }
    return FALSE;
}

//Rewards the index given, provided it doesn't go beyond the max reward value.
BOOLEAN reward(int index)
{
    rewardsArray[index]+=R_VALUE;
    if(rewardsArray[index]>MAX_R)
      { 
        rewardsArray[index] = MAX_R;
        return TRUE;
    }
    return FALSE;
}

//Moves the robot forward for t amount of seconds, then shuts the motors off.
float goForward(float t)
{
    motor(0,40);
    motor(1,40);
    sleep(t);
    ao();
    //reward(FRONT);
}

//Moves the robot backward for t amount of seconds, then shuts the motors off.
float goBackward(float t)
{
    motor(0,-30);
    motor(1,-30);
    sleep(t);
    ao();
    //reward(BACK);
}

//Turns the robot left for t seconds, then shuts the motors off.
float turnLeft(float t)
{
    motor(0,70);
    motor(1,-25);
    sleep(t);
    ao();
    //reward(LEFT);
    return t;
}

//Turns the robot right for t seconds, then shuts the motors off.
float turnRight(float t)
{
    motor(1,70);
    motor(0,-25);
    sleep(t);
    ao();
    //reward(RIGHT);
    return t;
}

